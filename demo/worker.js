
self.addEventListener('message', function(e) {
    var data;
    var coeffs;
    data = butterworthFilter(e.data);
    coeffs = frameProcess(data)
    self.postMessage(coeffs);
    
}, false);


function butterworthFilter(x){
	var i,j;
    var n = x.length;
	var y = [];
	
	var BUTT_ORD = 6;
	var BUTT_A = [1.0000, -1.4550, -0.4927, 0.7366, 0.6626, -0.2733, -0.1780];
	var BUTT_B = [0.4235, 0, -1.2704, 0, 1.2704, 0, -0.4235];
	
	for(i=0;i<BUTT_ORD;i++){
		y[i] = BUTT_B[0]*x[i];
		for (j=1; j<=i; j++){
            y[i] = y[i] + BUTT_B[j] * x[i-j] - BUTT_A[j] * y[i-j];
		}
	}
	
    for (i=BUTT_ORD; i<n; i++){
        y[i] = BUTT_B[0]*x[i];        
        for (j=1; j<=BUTT_ORD; j++){
            y[i] = y[i] + BUTT_B[j] * x[i-j] - BUTT_A[j] * y[i-j];
		}
    }
	return y;
}

// x : entrada
// y : salida
function dft(x)
{
    var k,t;
    var sumreal,sumimag;
	var y = [];
	var N;
	var pn,pkn,pknt;
	
	N = x.length;
	pn = 2*Math.PI/N;

    for (k = 0; k <  N; k++){
        sumreal = 0;
        sumimag = 0;
        
        pkn = pn*k;
        
		for (t = 0; t < N; t++){
			pknt = pkn*t;
            sumreal += x[t]*Math.cos(pknt);
            sumimag += -x[t]*Math.sin(pknt);
        }
        y[k] = Math.sqrt(sumreal*sumreal + sumimag*sumimag);
    }
	
	return y;
}

function mfcc(x)
{
    var i,m,k;    
    var h,Ar;
    var dft_module = dft(x);
	var c = []
	var N = x.length;
	
	var M = 40;
	var FREQS = [0.0, 50.0, 100.0, 150.0, 200.0, 250.0, 300.0, 350.0, 400.0, 450.0, 500.0, 550.0, 600.0, 650.0, 700.0, 750.0, 800.0, 850.0, 900.0, 950.0, 1000.0, 1050.0, 1100.0, 1150.0, 1200.0, 1250.0, 1300.0, 1350.0, 1400.0, 1450.0, 1500.0, 1550.0, 1600.0, 1650.0, 1700.0, 1750.0, 1800.0, 1850.0, 1900.0, 1950.0, 2000.0, 2050.0, 2100.0, 2150.0, 2200.0, 2250.0, 2300.0, 2350.0, 2400.0, 2450.0, 2500.0, 2550.0, 2600.0, 2650.0, 2700.0, 2750.0, 2800.0, 2850.0, 2900.0, 2950.0, 3000.0, 3050.0, 3100.0, 3150.0, 3200.0, 3250.0, 3300.0, 3350.0, 3400.0, 3450.0, 3500.0, 3550.0, 3600.0, 3650.0, 3700.0, 3750.0, 3800.0, 3850.0, 3900.0, 3950.0, 4000.0, 4050.0, 4100.0, 4150.0, 4200.0, 4250.0, 4300.0, 4350.0, 4400.0, 4450.0, 4500.0, 4550.0, 4600.0, 4650.0, 4700.0, 4750.0, 4800.0, 4850.0, 4900.0, 4950.0, 5000.0, 5050.0, 5100.0, 5150.0, 5200.0, 5250.0, 5300.0, 5350.0, 5400.0, 5450.0, 5500.0, 5550.0, 5600.0, 5650.0, 5700.0, 5750.0, 5800.0, 5850.0, 5900.0, 5950.0, 6000.0, 6050.0, 6100.0, 6150.0, 6200.0, 6250.0, 6300.0, 6350.0, 6400.0, 6450.0, 6500.0, 6550.0, 6600.0, 6650.0, 6700.0, 6750.0, 6800.0, 6850.0, 6900.0, 6950.0, 7000.0, 7050.0, 7100.0, 7150.0, 7200.0, 7250.0, 7300.0, 7350.0, 7400.0, 7450.0, 7500.0, 7550.0, 7600.0, 7650.0, 7700.0, 7750.0, 7800.0, 7850.0, 7900.0, 7950.0];
	var FILTERBANK = [59.99999999999994, 92.81348408123556, 127.0437112381943, 162.75185025556357, 200.00171091927095, 238.859858043395, 279.3957304202611, 321.68176490628144, 365.79352586528296, 411.8098402006309, 459.8129382174527, 509.8886005666759, 562.1263115334696, 616.619418944012, 673.4653009763347, 732.7655401733299, 794.6261049688833, 859.1575390515096, 926.4751589038846, 996.6992598712771, 1069.9553311271063, 1146.3742799197876, 1226.092665501565, 1309.2529431573814, 1396.0037187698429, 1486.500014375192, 1580.903545184826, 1679.3830085674003, 1782.1143855079122, 1889.281255082478, 2001.0751225107556, 2117.6957613722398, 2239.3515705979676, 2366.259946875563, 2498.647673133104, 2636.7513237960443, 2780.8176875413387, 2931.1042083042616, 3087.8794453259725, 3251.423553063925, 3422.028781822718, 3600.0000000000005];

    for ( m = 0; m < M; m++){
        Ar = 0;
		c[m] = 0;
        for(k=0; k<N/2; k++){
            if(FREQS[k] < FILTERBANK[m+1] && FREQS[k] >= FILTERBANK[m])
            {
                h = (FREQS[k]-FILTERBANK[m])/(FILTERBANK[m+1]-FILTERBANK[m]);
                c[m] += h * dft_module[k];
                Ar += h;
            }
            else if(FREQS[k] < FILTERBANK[m+2] && FREQS[k] >= FILTERBANK[m+1])
            {
                h = (FREQS[k]-FILTERBANK[m+2])/(FILTERBANK[m+1]-FILTERBANK[m+2]);
                c[m] += h * dft_module[k];
                Ar += h;
            }
        }
        c[m] = Math.log(c[m]/Ar);
    }
	c = dct(c); 
	
	return c;
}

function dct(x){
	var l,m;
    var c;
    var M = x.length;
    var coeficients = [];
        
	for(l = 0; l < M; l++){
		c = l*Math.PI/M;
		coeficients[l] = 0;
		
		for (m = 0; m < M; m++)
			coeficients[l] += x[m] * Math.cos(c*(m+0.5));
	}
	
	return coeficients;
}


function frameProcess(x){
    var i;
	var N = x.length;
    var zcr = 0;
    var sign = -1;
	var HAMMING_WINDOW = [0.08000000000000002, 0.08035911769735699, 0.08143591006977324, 0.08322869583378223, 0.08573467576722993, 0.08894993707992793, 0.09286945952301107, 0.09748712322745967, 0.10279571825954892, 0.10878695587830439, 0.11545148147738715, 0.12277888919120089, 0.1307577381424163, 0.13937557030554226, 0.14861892995865444, 0.15847338469290717, 0.16892354794702724, 0.17995310303160234, 0.19154482860565475, 0.20368062556572136, 0.21634154530545485, 0.22950781930162317, 0.24315888998031204, 0.2572734428151364, 0.27182943960734285, 0.28680415289584116, 0.3021742014434368, 0.31791558674385734, 0.33400373049257104, 0.3504135129628917, 0.3671193122274504, 0.3840950441637935, 0.4013142031816427, 0.41874990360822895, 0.43637492166707836, 0.4541617379847075, 0.47208258055885866, 0.4901094681211843, 0.5082142538266761, 0.5263686692016225, 0.5445443682814742, 0.5627129718697033, 0.5808461118485501, 0.5989154754724704, 0.6168928495751282, 0.6347501646209053, 0.652459538532148, 0.6699933202237235, 0.6873241327769053, 0.704424916185183, 0.7212689696052498, 0.7378299930471993, 0.7540821284388394, 0.7699999999999999, 0.7855587538638037, 0.8007340968830274, 0.8155023345609682, 0.8298404080475872, 0.8437259301431668, 0.8571372202532656, 0.8700533382403923, 0.8824541171195459, 0.8943201945465673, 0.9056330430501426, 0.9163749989602492, 0.9265292899878803, 0.9360800614129836, 0.9450124008397232, 0.9533123614804168, 0.9609669839317885, 0.9679643164095391, 0.9742934334096378, 0.9799444527672003, 0.9849085510863163, 0.9891779775167342, 0.9927460658558946, 0.9956072449574132, 0.9977570474297656, 0.9991921166115878, 0.9999102118127059, 0.9999102118127059, 0.9991921166115879, 0.9977570474297656, 0.9956072449574132, 0.9927460658558946, 0.9891779775167343, 0.9849085510863164, 0.9799444527672003, 0.9742934334096378, 0.9679643164095392, 0.9609669839317886, 0.9533123614804166, 0.9450124008397232, 0.9360800614129836, 0.9265292899878804, 0.9163749989602491, 0.9056330430501425, 0.8943201945465673, 0.8824541171195459, 0.8700533382403922, 0.8571372202532654, 0.8437259301431668, 0.8298404080475874, 0.8155023345609684, 0.8007340968830274, 0.7855587538638039, 0.7700000000000002, 0.7540821284388396, 0.7378299930471994, 0.7212689696052498, 0.7044249161851832, 0.6873241327769055, 0.6699933202237234, 0.6524595385321481, 0.6347501646209054, 0.6168928495751285, 0.5989154754724703, 0.58084611184855, 0.5627129718697034, 0.5445443682814743, 0.5263686692016227, 0.508214253826676, 0.4901094681211842, 0.47208258055885866, 0.4541617379847076, 0.4363749216670785, 0.4187499036082287, 0.40131420318164257, 0.3840950441637935, 0.36711931222745053, 0.3504135129628918, 0.3340037304925708, 0.31791558674385734, 0.3021742014434369, 0.28680415289584127, 0.271829439607343, 0.2572734428151363, 0.24315888998031204, 0.22950781930162317, 0.21634154530545496, 0.20368062556572153, 0.19154482860565492, 0.17995310303160228, 0.16892354794702724, 0.15847338469290728, 0.14861892995865444, 0.13937557030554243, 0.13075773814241626, 0.12277888919120095, 0.11545148147738715, 0.10878695587830445, 0.10279571825954897, 0.09748712322745978, 0.09286945952301107, 0.08894993707992799, 0.08573467576722993, 0.08322869583378223, 0.08143591006977324, 0.08035911769735699, 0.08000000000000002];
    var xHamming = []; // Hamming
    var xPE = [];
	
    x[0] /= 32768; // Normalizacion
    xHamming[0] = x[0] * HAMMING_WINDOW[0]; // Hamming
    xPE[0] = xHamming[0]; // Preenfasis
    
    for (i=1; i<N; ++i){
        
        x[i] /= 32768; // Normalizacion
        
        if (sign==-1 && x[i]>=0){
            zcr ++;
            sign = 1;
        }
        else if (sign==1 && x[i]<0){
            zcr ++;
            sign = -1;
        }
        
        xHamming[i] = x[i] * HAMMING_WINDOW[i]; // Hamming
        xPE[i] = xHamming[i] - 0.95 * xHamming[i-1]; // Preenfasis
    }
    zcr /= N;
    
    c = mfcc(xPE); // mfcc
    c[0] = zcr;
    
    return c;
}
